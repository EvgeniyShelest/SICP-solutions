#lang racket
;Функция f определяется правилом: f(n) = n, если n < 3, и f(n) = f(n−1)+f(n−2)+f(n−3)
(require rackunit)

;рекурсивный процесс с тернарной древовидной рекурсией
;число шагов вычисления растет пропорционально росту самого числа
(define (f n)
  (cond ((< n 3) n)
        (else (+ (f (- n 1))
                 (f (- n 2))
                 (f (- n 3))
                 ))))
;итеративный процесс с рекурсивной линейной функцией
;число шагов вычисления растет пропорционально n
(define (fi n)
  (if (< n 3)
      n
      (fi-iter 0 1 2 n)))
(define (fi-iter a b c count)
  (if (= count 2)
      c
      (fi-iter b c (+ a b c) (- count 1))))

;(f 123) ; зависает
(fi 123) ; 184958966490038989201039581717311 (меньше секунды)
(check-equal? (f 20) (fi 20))
